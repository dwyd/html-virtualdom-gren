module Transmutable.Html.VirtualDom exposing ( toVirtualDom )

{-| Transmute HTML into virtual DOM.

@docs toVirtualDom

-}

import Json.Encode
import Transmutable.Html.Interior exposing (..)
import VirtualDom


{-| The transmutationist.
-}
toVirtualDom : Html msg -> VirtualDom.Node msg
toVirtualDom =
    transmute
        { node =
            \{ key, tagName } attributes { namespace } ->
                let
                    handledAttributes =
                        Array.map handleAttribute attributes
                in
                when namespace is
                    Just ns ->
                        when key is
                            Just k ->
                                \nodes ->
                                    VirtualDom.keyedNodeNS
                                        ns
                                        tagName
                                        handledAttributes
                                        (Array.map
                                            (\node ->
                                                { key = k
                                                , node = node
                                                }
                                            )
                                            nodes
                                        )

                            Nothing ->
                                VirtualDom.nodeNS ns tagName handledAttributes

                    Nothing ->
                        when key is
                            Just k ->
                                \nodes ->
                                    VirtualDom.keyedNode
                                        tagName
                                        handledAttributes
                                        (Array.map
                                            (\node ->
                                                { key = k
                                                , node = node
                                                }
                                            )
                                            nodes
                                        )

                            Nothing ->
                                VirtualDom.node tagName handledAttributes
        , injectDescendants = \parentNodeResult childNodeResults _ -> parentNodeResult childNodeResults

        , -- 
          cdata = \_ _ -> VirtualDom.text ""
        , comment = \_ _ -> VirtualDom.text ""
        , declaration = \_ _ -> VirtualDom.text ""
        , processingInstruction = \_ _ -> VirtualDom.text ""
        , text = \_ -> VirtualDom.text
        }


handleAttribute attr =
    when attr is
        Attribute { key = key, value = value } ->
            VirtualDom.attribute key value

        BoolProperty { key = key, value = value } ->
            VirtualDom.property key (Json.Encode.bool value)

        Event { name = name, decoder = (Normal decoder) } ->
            VirtualDom.on name (VirtualDom.Normal decoder)

        Event { name = name, decoder = (MayStopPropagation decoder) } ->
            VirtualDom.on name (VirtualDom.MayStopPropagation decoder)

        Event { name = name, decoder = (MayPreventDefault decoder) } ->
            VirtualDom.on name (VirtualDom.MayPreventDefault decoder)

        Event { name = name, decoder = (Custom decoder) } ->
            VirtualDom.on name (VirtualDom.Custom decoder)

        StringProperty { key = key, value = value } ->
            VirtualDom.property key (Json.Encode.string value)

        Style { key = key, value } ->
            VirtualDom.style key value

        ValueProperty { key = key, value } ->
            VirtualDom.property key value
